// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>

struct node *add_in_Empty(struct node *,int);
struct node *addAtbeg(struct node *,int);
struct node *addAtLast(struct node *,int);
struct node *Reverse(struct node *);
struct node {
    struct node *prev;
    int data;
    struct node *next;
};
int main()
{
    struct node *head=NULL;
    struct node *ptr;
    head=add_in_Empty(head,55);
    head=addAtbeg(head,48);
    head=addAtLast(head,53);
    head=addAtLast(head,52);
    head=addAtLast(head,54);
    head=addAtLast(head,56);
    head=addAtLast(head,57);
    head=addAtLast(head,59);
    printf("Double linked list data as follows\n");
    ptr=head;
    while(ptr!=NULL)
    {
        printf("%d-> ",ptr->data);
        ptr=ptr->next;
    }
    printf("NULL\n");
    head=Reverse(head);
    printf("Reverse Double Linked List\n");
    ptr=head;
    while(ptr!=NULL)
    {
        printf("%d-> ",ptr->data);
        ptr=ptr->next;
    }
    printf("NULL\n");
    return 0;
}
struct node *add_in_Empty(struct node *head,int data)
{
    struct node *temp=malloc(sizeof(struct node));
    temp->prev=NULL;
    temp->data=data;
    temp->next=NULL;
    return temp;
}

struct node *addAtbeg(struct node *head,int data)
{
    struct node *temp=malloc(sizeof(struct node));
    temp->prev=NULL;
    temp->data=data;
    temp->next=head;
    if(head!=NULL)
    {
        head->prev=temp;
    }
    head=temp;
    return head;
}

struct node *addAtLast(struct node *head,int data)
{
    struct node *temp=malloc(sizeof(struct node));
    struct node *tp=head;
    temp->prev=NULL;
    temp->data=data;
    temp->next=NULL;
    while(tp->next!=NULL)
    {
        tp=tp->next;
    }
    tp->next=temp;
    temp->prev=tp;
    return head;
}

struct node *Reverse(struct node *head)
{
    struct node *ptr1=head;
    struct node *ptr2=ptr1->next;
    ptr1->next=NULL;
    ptr1->prev=ptr2;
    
    while(ptr2!=NULL)
    {
        ptr2->prev=ptr2->next;
        ptr2->next=ptr1;
        ptr1=ptr2;
        ptr2=ptr2->prev;
    }
    head=ptr1;
    return head;
}