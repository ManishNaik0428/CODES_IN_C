#include<stdio.h>
#include<stdlib.h>

struct node *addToEmpty(struct node *,int);
struct node *add_at_beg(struct node *,int);
struct node *add_at_last(struct node *,int);
struct node *insert_at_position(struct node *,int,int);
struct node *add_before_position(struct node *,int,int);
struct node *delete_First(struct node *);
struct node *delete_last(struct node *);
struct node *delete_inter_node(struct node *,int);
struct node * reverse(struct node *);
struct node{
    struct node *prev;
    int data;
    struct node *next;
};

int main()
{
    struct node *head=NULL;
    struct node *ptr;
    int position=2;
    head=addToEmpty(head,69);
    head=add_at_beg(head,55);
    head=add_at_last(head,31);
    head=add_at_last(head,32);
    head=add_at_last(head,33);
    head=add_at_last(head,34);
    head=add_at_last(head,35);
    head=insert_at_position(head,48,position);
    printf("List After Entering in empty file and adding in beginning:\n");
    ptr=head;
    while(ptr!=NULL)
    {
        printf("%d->",ptr->data);
        ptr=ptr->next;
    }
    printf("NULL\n");
    printf("Added before positon\n");
    int pos=4;
    head=add_before_position(head,23,pos);
      ptr=head;
    while(ptr!=NULL)
    {
        printf("%d->",ptr->data);
        ptr=ptr->next;
    }
    printf("NULL\n");
    printf("List after deleting first node:\n");
    head=delete_First(head);
    ptr=head;
    while(ptr!=NULL)
    {
        printf("%d-> ",ptr->data);
        ptr=ptr->next;
    }
    printf("NULL \n");
    printf("List after deleting last element\n");
    head=delete_last(head);
    ptr=head;
    while(ptr!=NULL)
    {
        printf("%d->",ptr->data);
        ptr=ptr->next;
    }
    printf("NULL\n");
    int posi=2;
    printf("deleting at specific position:\n");
    head=delete_inter_node(head,posi);
    ptr=head;
    while(ptr!=NULL)
    {
        printf("%d->",ptr->data);
        ptr=ptr->next;
    }
    printf("NULL\n");
    printf("Reverse List:\n");
    head=reverse(head);
    ptr=head;
    while(ptr!=NULL)
    {
        printf("%d->",ptr->data);
        ptr=ptr->next;
    }
    printf("NULL\n");
    return 0;
}

struct node *addToEmpty(struct node *head,int data)
{
    struct node *temp=malloc(sizeof(struct node));
    temp->prev=NULL;
    temp->data=data;
    temp->next=NULL;
    return temp;
}

struct node *add_at_beg(struct node *head,int data)
{
    struct node *temp=malloc(sizeof(struct node));
    temp->prev=NULL;
    temp->data=data;
    temp->next=head;
    if(head!=NULL)
    {
        head->prev=temp;
    }
    head=temp;
    return head;
}

struct node *add_at_last(struct node *head,int data)
{
    struct node *temp=malloc(sizeof(struct node));
    struct node *tp=head;
    temp->prev=NULL;
    temp->data=data;
    temp->next=NULL;
    if(head==NULL)
    {
        return temp;
    }
    while(tp->next!=NULL)
    {
        tp=tp->next;
    }
    tp->next=temp;
    temp->prev=tp;
    return head;
}

struct node *insert_at_position(struct node *head,int data,int position)
{
    if(position==1)
    {
        return add_at_beg(head,data);
    }
    struct node *temp=head;
    struct node *newP=malloc(sizeof(struct node));
    newP->prev=NULL;
    newP->data=data;
    newP->next=NULL;
    
    while(position>2 && temp!=NULL)
    {
        temp=temp->next;
        position--;
    }
    if(temp->next==NULL)
    {
        return add_at_last(head,data);
    }
    newP->next=temp->next;
    temp->next->prev=newP;
    temp->next=newP;
    newP->prev=temp;
    return head;
}

struct node *add_before_position(struct node *head,int data,int position)
{
    if(position==1)
    {
        return add_at_beg(head,data);
    }
    struct node *temp=head;
    while(position>2 && temp->next!=NULL)
    {
        temp=temp->next;
        position--;
    }
    struct node *newP=malloc(sizeof(struct node));
    newP->data=data;
    newP->prev=temp;
    newP->next=temp->next;
    if(temp->next!=NULL)
    {
        temp->next->prev=newP;
    }
    temp->next=newP;
    return head;
}

struct node *delete_First(struct node *head)
{
    struct node *temp=head;
    head=head->next;
    free(temp);
    temp=NULL;
    head->prev=NULL;
    return head;
}

struct node *delete_last(struct node *head)
{
    struct node *temp=head;
    struct node *temp2;
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp2=temp->prev;
    temp2->next=NULL;
    free(temp);
    temp=NULL;
    return head;
}

struct node *delete_inter_node(struct node *head,int position)
{
    struct node *temp=head;
    struct node *temp1;
    while(position>1)
    {
        temp=temp->next;
        position--;
    }
    temp1=temp->prev;
    temp1->next=temp->next;
    temp->next->prev=temp1->next;
    free(temp);
    temp=NULL;
    return head;
}


struct node *reverse(struct node *head)
{
    struct node *ptr1=head;
    struct node *ptr2=ptr1->next;
    
    ptr1->next=NULL;
    ptr1->prev=ptr2;
    
    while(ptr2!=NULL)
    {
        ptr2->prev=ptr2->next;
        ptr2->next=ptr1;
        ptr1=ptr2;
        ptr2=ptr2->prev;
    }
    head=ptr1;
    return head;
}